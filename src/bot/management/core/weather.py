import asyncio
import logging
import os
from datetime import datetime
from datetime import timezone as dt_timezone
from typing import Any
from zoneinfo import ZoneInfo

import aiohttp


def get_kp_description(kp_index: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ Kp-–∏–Ω–¥–µ–∫—Å–∞ (–º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ –ø–æ–ª—è)."""
    if kp_index <= 1:
        return f"K-–∏–Ω–¥–µ–∫—Å {kp_index} (–°–ø–æ–∫–æ–π–Ω–æ–µ üòå)"
    elif kp_index == 2:
        return f"K-–∏–Ω–¥–µ–∫—Å {kp_index} (–°–ª–∞–±–æ –≤–æ–∑–º—É—â–µ–Ω–Ω–æ–µ üòê)"
    elif kp_index == 3:
        return f"K-–∏–Ω–¥–µ–∫—Å {kp_index} (–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ üòï)"
    elif kp_index == 4:
        return f"K-–∏–Ω–¥–µ–∫—Å {kp_index} (–í–æ–∑–º—É—â–µ–Ω–Ω–æ–µ üòü)"
    elif kp_index == 5:
        return f"K-–∏–Ω–¥–µ–∫—Å {kp_index} (–°–ª–∞–±–∞—è –±—É—Ä—è G1 üå©Ô∏è)"
    elif kp_index == 6:
        return f"K-–∏–Ω–¥–µ–∫—Å {kp_index} (–°—Ä–µ–¥–Ω—è—è –±—É—Ä—è G2 ‚õàÔ∏è)"
    elif kp_index == 7:
        return f"K-–∏–Ω–¥–µ–∫—Å {kp_index} (–°–∏–ª—å–Ω–∞—è –±—É—Ä—è G3 ‚ö°)"
    elif kp_index == 8:
        return f"K-–∏–Ω–¥–µ–∫—Å {kp_index} (–û—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è –±—É—Ä—è G4 üî•)"
    else:
        return f"K-–∏–Ω–¥–µ–∫—Å {kp_index} (–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –±—É—Ä—è G5 üåã)"


def get_moon_translation(moon_phase_en: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ñ–∞–∑—É –ª—É–Ω—ã —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏."""
    phases = {
        "New Moon": "–ù–æ–≤–æ–ª—É–Ω–∏–µ üåë",
        "Waxing Crescent": "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø üåí",
        "First Quarter": "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å üåì",
        "Waxing Gibbous": "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ üåî",
        "Full Moon": "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ üåï",
        "Waning Gibbous": "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞ üåñ",
        "Last Quarter": "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å üåó",
        "Waning Crescent": "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø üåò",
    }
    return phases.get(moon_phase_en, moon_phase_en)


async def fetch_owm_weather(session, city, api_key):
    """–ü–æ–ª—É—á–∞–µ—Ç –¢–ï–ö–£–©–£–Æ –ø–æ–≥–æ–¥—É —Å OpenWeatherMap."""
    url = (
        "http://api.openweathermap.org/data/2.5/"
        f"weather?q={city}&appid={api_key}&units=metric&lang=ru"
    )
    try:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.json()
            logging.warning(f"OWM Weather API error: {response.status}")
    except Exception as e:
        logging.error(f"OWM weather fetch error: {e}")
    return None


async def fetch_owm_forecast(session, city, api_key):
    """–ü–æ–ª—É—á–∞–µ—Ç –ü–†–û–ì–ù–û–ó –ø–æ–≥–æ–¥—ã —Å OpenWeatherMap."""
    url = (
        "http://api.openweathermap.org/data/2.5/"
        f"forecast?q={city}&appid={api_key}&units=metric&lang=ru"
    )
    try:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.json()
            logging.warning(f"OWM Forecast API error: {response.status}")
    except Exception as e:
        logging.error(f"OWM forecast fetch error: {e}")
    return None


async def fetch_mag_data(session):
    """–ü–æ–ª—É—á–∞–µ—Ç Kp-–∏–Ω–¥–µ–∫—Å (–º–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ) —Å NOAA."""
    url = "https://services.swpc.noaa.gov/json/planetary_k_index_1m.json"
    try:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.json()
            logging.warning(f"NOAA Mag API error: {response.status}")
    except Exception as e:
        logging.error(f"NOAA mag fetch error: {e}")
    return None


async def fetch_moon_data(session, city):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–∑—É –õ—É–Ω—ã —Å wttr.in."""
    url = f"https://wttr.in/{city}?format=j1"
    try:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.json()
            logging.warning(f"Moon API (wttr.in) error: {response.status}")
    except Exception as e:
        logging.error(f"Moon fetch error: {e}")
    return None


def parse_current_weather(data):
    """–ü–∞—Ä—Å–∏—Ç '—Å—ã—Ä–æ–π' JSON –æ—Ç OWM Weather."""
    if not data or data["cod"] != 200:
        return None

    try:
        def get_wind_direction(deg):
            directions = [
                "—Å–µ–≤–µ—Ä–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–≤–æ—Å—Ç–æ—á–Ω—ã–π",
                "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–∂–Ω—ã–π", "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
                "–∑–∞–ø–∞–¥–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
            ]
            index = round((deg % 360) / 45) % 8
            return directions[index]
        weather_emoji = {
            "–¥–æ–∂–¥—å": "üåßÔ∏è", "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "üåßÔ∏è", "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
            "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥": "üå®Ô∏è", "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥": "üå®Ô∏è",
            "—è—Å–Ω–æ": "‚òÄÔ∏è", "–æ–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è", "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚òÅÔ∏è",
            "–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚õÖ", "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "‚õÖ",
            "–ø–∞—Å–º—É—Ä–Ω–æ": "üå•Ô∏è", "–Ω–µ–±–æ–ª—å—à–∞—è –º–æ—Ä–æ—Å—å": "üåßÔ∏è",
            "–ø–ª–æ—Ç–Ω—ã–π —Ç—É–º–∞–Ω": "üå´Ô∏è", "—Ç—É–º–∞–Ω": "üå´Ô∏è", "–≥—Ä–æ–∑–∞": "‚õàÔ∏è",
            "–≤–µ—Ç–µ—Ä": "üí®",
        }

        if "grnd_level" in data["main"]:
            pressure_hpa = data["main"]["grnd_level"]
        else:
            pressure_hpa = data["main"]["pressure"]
            logging.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞–≤–ª–µ–Ω–∏–∏ \"grnd_level\". "
                            + "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–Ω–∞—á–µ–Ω–∏—é \"–¥–∞–≤–ª–µ–Ω–∏–µ\""
                            + "(—É—Ä–æ–≤–µ–Ω—å –º–æ—Ä—è).")
        pressure_mmhg = pressure_hpa * 0.750062
        description = data["weather"][0]["description"]

        if pressure_mmhg < 735:
            pressure_status = "–ù–∏–∑–∫–æ–µ (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ) üìâ"
        elif pressure_mmhg < 740:
            pressure_status = "–ü–æ–Ω–∏–∂–µ–Ω–Ω–æ–µ üòï"
        elif 745.5 <= pressure_mmhg <= 746.5:
            pressure_status = "–ò–¥–µ–∞–ª—å–Ω–æ–µ ‚ú®"
        elif pressure_mmhg <= 755:
            pressure_status = "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ ‚úÖ"
        elif pressure_mmhg <= 760:
            pressure_status = "–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ üòï"
        else:
            pressure_status = "–í—ã—Å–æ–∫–æ–µ (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ) üìà"

        return {
            "temp": data["main"]["temp"],
            "feels_like": data["main"]["feels_like"],
            "pressure_mmhg": pressure_mmhg,
            "pressure_status": pressure_status,
            "humidity": data["main"]["humidity"],
            "description": description.capitalize(),
            "clouds": data["clouds"]["all"],
            "wind_speed": data["wind"]["speed"],
            "wind_gust": data["wind"].get("gust", 0),
            "wind_direction": get_wind_direction(data["wind"].get("deg", 0)),
            "sunrise": datetime.fromtimestamp(
                data["sys"]["sunrise"]).strftime("%H:%M"),
            "sunset": datetime.fromtimestamp(
                data["sys"]["sunset"]).strftime("%H:%M"),
            "emoji": weather_emoji.get(description.lower(), "‚ùì"),
        }
    except Exception as e:
        logging.error(f"Error parsing OWM weather: {e}")
        return None


def parse_forecast(data):
    """–ü–∞—Ä—Å–∏—Ç '—Å—ã—Ä–æ–π' JSON –æ—Ç OWM Forecast."""
    if not data or data["cod"] != "200":
        return None

    try:
        moscow_tz = ZoneInfo("Europe/Moscow")
        current_date = datetime.now(moscow_tz).date()
        forecast: dict[str, Any] = {"morning": None,
                                    "day": None, "evening": None}

        for entry in data["list"]:
            entry_time_utc = datetime.fromtimestamp(
                entry["dt"], tz=dt_timezone.utc)
            entry_time_moscow = entry_time_utc.astimezone(moscow_tz)
            if entry_time_moscow.date() == current_date:
                time_str = entry_time_moscow.strftime("%H:%M")
                desc = entry["weather"][0]["description"]
                temp = entry["main"]["temp"]

                if time_str == "09:00":
                    forecast["morning"] = {"temp": temp, "desc": desc}
                elif time_str == "15:00":
                    forecast["day"] = {"temp": temp, "desc": desc}
                elif time_str == "21:00":
                    forecast["evening"] = {"temp": temp, "desc": desc}
        return forecast
    except Exception as e:
        logging.error(f"Error parsing OWM forecast: {e}")
        return None


def parse_mag_data(data):
    """–ü–∞—Ä—Å–∏—Ç '—Å—ã—Ä–æ–π' JSON –æ—Ç NOAA."""
    if not data:
        return None
    try:
        latest_entry = data[-1]
        kp_index = latest_entry["kp_index"]
        return {"status": get_kp_description(kp_index)}
    except Exception as e:
        logging.warning(f"Mag parse error: {e}. Data received: {data}")
        return None


def parse_moon_data(data):
    """–ü–∞—Ä—Å–∏—Ç '—Å—ã—Ä–æ–π' JSON –æ—Ç wttr.in."""
    if not data:
        return None
    try:
        moon_phase_en = data["weather"][0]["astronomy"][0]["moon_phase"]
        return {"phase": get_moon_translation(moon_phase_en)}
    except Exception as e:
        logging.warning(f"Moon parse error: {e}")
        return None


def format_weather_message(city_ru, weather_data,
                           forecast_data, mag_data, moon_data):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""

    if not weather_data:
        return "üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."

    lines = [
        f"<b>üèôÔ∏è –ü–æ–≥–æ–¥–∞ –≤ {city_ru}:</b> "
        f"{weather_data['emoji']} {weather_data['description']}\n",
        "<b>üå° –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>",
        f"- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temp']:.1f}¬∞C",
        f"- –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data['feels_like']:.1f}¬∞C",
        f"- –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {weather_data['clouds']}%",
        f"- –í–µ—Ç–µ—Ä: {weather_data['wind_speed']:.1f} –º/—Å,"
        f" {weather_data['wind_direction']}",
        f"- –ü–æ—Ä—ã–≤—ã: {weather_data['wind_gust']:.1f} –º/—Å",
        f"- –î–∞–≤–ª–µ–Ω–∏–µ: {weather_data['pressure_mmhg']:.1f} –º–º —Ä—Ç.—Å—Ç."
        f" ({weather_data['pressure_status']})",
        f"- –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n",
    ]

    moon_status = moon_data["phase"] if moon_data else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    mag_status = mag_data["status"] if mag_data else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    lines.extend([
        "<b>üåå –ê—Å—Ç—Ä–æ-–æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞:</b>",
        f"- üåï –õ—É–Ω–∞: {moon_status}",
        f"- üì° –ú–∞–≥–Ω. –ø–æ–ª–µ: {mag_status}\n",
    ])

    lines.extend([
        f"<b>‚è≥ –î–ª–∏–Ω–∞ –¥–Ω—è –≤ {city_ru}:</b>",
        f"- üåÖ –í–æ—Å—Ö–æ–¥: {weather_data['sunrise']}",
        f"- üåá –ó–∞–∫–∞—Ç: {weather_data['sunset']}\n",
    ])

    lines.append("<b>üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>")
    if forecast_data:
        weather_emoji_map = {
            "–¥–æ–∂–¥—å": "üåßÔ∏è", "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "üåßÔ∏è", "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
            "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥": "üå®Ô∏è", "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥": "üå®Ô∏è",
            "—è—Å–Ω–æ": "‚òÄÔ∏è", "–æ–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è", "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚òÅÔ∏è",
            "–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚õÖ", "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "‚õÖ",
            "–ø–∞—Å–º—É—Ä–Ω–æ": "üå•Ô∏è", "–Ω–µ–±–æ–ª—å—à–∞—è –º–æ—Ä–æ—Å—å": "üåßÔ∏è",
            "–ø–ª–æ—Ç–Ω—ã–π —Ç—É–º–∞–Ω": "üå´Ô∏è", "—Ç—É–º–∞–Ω": "üå´Ô∏è", "–≥—Ä–æ–∑–∞": "‚õàÔ∏è",
            "–≤–µ—Ç–µ—Ä": "üí®",
        }

        for time_name, data in [("–£—Ç—Ä–æ–º", forecast_data['morning']),
                                ("–î–Ω—ë–º", forecast_data['day']),
                                ("–í–µ—á–µ—Ä–æ–º", forecast_data['evening'])]:
            if data:
                emoji = weather_emoji_map.get(data['desc'].lower(), "‚ùì")
                lines.append(
                    f"<b>{emoji} {time_name}:</b> "
                    f"{data['temp']:.1f}¬∞C ({data['desc']})"
                )
            else:
                lines.append(f"<b>‚ùì {time_name}:</b> –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    else:
        lines.append("<i>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>")

    lines.append("\n<i>–ü–æ –¥–∞–Ω–Ω—ã–º openweathermap.org, "
                 "swpc.noaa.gov, wttr.in</i>")
    return "\n".join(lines)


async def get_weather():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç, –ø–∞—Ä—Å–∏—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç
    –≤—Å–µ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
    """
    api_key = os.getenv("OPENWEATHER_API_KEY")
    city = "Zelenograd"
    city_ru = "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥–µ"

    async with aiohttp.ClientSession() as session:
        results = await asyncio.gather(
            fetch_owm_weather(session, city, api_key),
            fetch_owm_forecast(session, city, api_key),
            fetch_mag_data(session),
            fetch_moon_data(session, city)
        )
        owm_weather_raw, owm_forecast_raw, mag_raw, moon_raw = results
        weather_data = parse_current_weather(owm_weather_raw)
        forecast_data = parse_forecast(owm_forecast_raw)
        mag_data = parse_mag_data(mag_raw)
        moon_data = parse_moon_data(moon_raw)
        return format_weather_message(
            city_ru,
            weather_data,
            forecast_data,
            mag_data,
            moon_data
        )
