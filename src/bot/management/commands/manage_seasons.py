import logging
import os
import random
from datetime import datetime, timedelta

from asgiref.sync import async_to_sync
from dateutil.relativedelta import relativedelta
from django.core.management.base import BaseCommand
from django.db.models import Sum, Avg
from django.utils import timezone

from bot.management.commands.start_bot import application
from bot.models import Achievement, Season, SeasonRank

logger = logging.getLogger(__name__)

SEASON_IT_NAMES = {
    'winter': [
        "‚ùÑÔ∏è –ú–æ—Ä–æ–∑–Ω—ã–π –∞–ø—Ç–∞–π–º",
        "‚õÑ –ó–∏–º–Ω–µ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ",
        "üßä –õ–µ–¥—è–Ω–æ–π RAID-–º–∞—Å—Å–∏–≤",
        "üõ°Ô∏è –§–∞–µ—Ä–≤–æ–ª-–º–æ—Ä–æ–∑",
        "‚ùÑÔ∏è –°–Ω–µ–∂–Ω—ã–π –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä",
        "üß£ –®–∞—Ä—Ñ–æ-—Å–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
        "üî• –ì–æ—Ä—è—á–∏–π –∫–æ—Ñ–µ –Ω–∞ —Ö–æ–ª–æ–¥–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ",
        "üå®Ô∏è –°–Ω–µ–∂–Ω—ã–π DNS-—à—Ç–æ—Ä–º",
        "üíª –ó–∏–º–Ω—è—è –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è",
        "‚ùÑÔ∏è –ú–æ—Ä–æ–∑–Ω—ã–π –±—ç–∫–∞–ø"
    ],
    'spring': [
        "üå± –í–µ—Å–µ–Ω–Ω–∏–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥",
        "üå∏ –¶–≤–µ—Ç—É—â–∏–π –¥–µ–ø–ª–æ–π",
        "üåßÔ∏è –î–æ–∂–¥–µ–≤–æ–π –±—ç–∫–∞–ø",
        "üêû –°–µ–∑–æ–Ω –±–∞–≥—Ñ–∏–∫—Å–æ–≤",
        "üîÑ –í–µ—Å–µ–Ω–Ω–∏–π —Ä–µ–±—É—Ç",
        "üíæ –†–æ—Å–∞ –Ω–∞ SSD",
        "üåø –ó–µ–ª–µ–Ω—ã–π –∫–æ–¥ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
        "üåº –¶–≤–µ—Ç—É—â–∏–π API-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
        "üöø –í–µ—Å–µ–Ω–Ω—è—è —á–∏—Å—Ç–∫–∞ –∫–æ–¥–∞",
        "ü™¥ –†–æ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞"
    ],
    'summer': [
        "‚òÄÔ∏è –õ–µ—Ç–Ω–∏–π –æ–≤–µ—Ä–∫–ª–æ–∫–∏–Ω–≥",
        "üèñÔ∏è –ü–µ—Å–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "üåä –í–æ–ª–Ω–æ–≤–æ–π DDOS",
        "üî• –ñ–∞—Ä–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä",
        "üçâ –ê—Ä–±—É–∑–Ω—ã–π –∫–æ–º–ø—Ä–µ—Å—Å",
        "‚õ±Ô∏è –ü–ª—è–∂–Ω—ã–π —Ä–µ–∂–∏–º —è–¥—Ä–∞",
        "üå¥ –ü–∞–ª—å–º–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
        "üèÑ‚Äç‚ôÇÔ∏è –°–µ—Ä—Ñ–∏–Ω–≥ –ø–æ –ª–æ–≥–∞–º",
        "üåû –°–æ–ª–Ω–µ—á–Ω—ã–π –∞–ø—Ç–∞–π–º",
        "üç¶ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤"
    ],
    'autumn': [
        "üçÅ –õ–∏—Å—Ç–æ–ø–∞–¥–Ω—ã–π Git Merge",
        "üçÇ –û—Å–µ–Ω–Ω–∏–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞",
        "üåßÔ∏è –î–æ–∂–¥–ª–∏–≤—ã–π –±—ç–∫–∞–ø",
        "ü¶É –ò–Ω–¥–µ–π—Å–∫–∏–π –∞–ø—Ç–∞–π–º",
        "‚òï –ö–æ—Ñ–µ–π–Ω—ã–π –¥–µ–±–∞–≥–≥–∏–Ω–≥",
        "üìâ –ü–∞–¥–∞—é—â–∏–µ –ª–∏—Å—Ç—å—è –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏",
        "üçÑ –ì—Ä–∏–±–Ω–æ–π —Ä–æ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏",
        "üå∞ –ñ–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫ —Å –æ—Ä–µ—Ö–∞–º–∏",
        "üçé –Ø–±–ª–æ—á–Ω—ã–π –ø–∞—Ç—á-–≤—Ç–æ—Ä–Ω–∏–∫",
        "üï∏Ô∏è –ü–∞—É—Ç–∏–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    ]
}


IT_MEMES = [
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –∏ –≤–∫–ª—é—á–∏—Ç—å —Å–µ–∑–æ–Ω",
    "–≠—Ç–æ –Ω–µ –±–∞–≥, —ç—Ç–æ —Ñ–∏—á–∞ —Å–µ–∑–æ–Ω–∞",
    "–£ –º–µ–Ω—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞ —É –≤–∞—Å–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!?",
    "–°–µ–∑–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã 99999 –±–∞–≥–æ–≤",
    "–ß—É—Ç—å –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ, —á–µ–º –ø—Ä–æ—à–ª—ã–π —Å–µ–∑–æ–Ω",
    "–ë—ã—Å—Ç—Ä–µ–µ, –≤—ã—à–µ, —Å–∏–ª—å–Ω–µ–µ... –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ",
    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ (–∫–∞–∫ –≤—Å–µ–≥–¥–∞)",
    "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è? –ö–∞–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è?",
    "–ù–∞—à CI/CD –ø–∞–π–ø–ª–∞–π–Ω —Ç–µ–ø–µ—Ä—å —Å –≤–∏–¥–æ–º –Ω–∞ –æ–∫–µ–∞–Ω",
    "–ù–æ–≤—ã–π —Å–µ–∑–æ–Ω - –Ω–æ–≤—ã–µ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –æ—à–∏–±–∫–∏!"
]


class Command(BaseCommand):
    help = ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ–∑–æ–Ω–æ–≤: "
            "—Å–æ–∑–¥–∞–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏"""
        try:
            self.process_expired_seasons()
            self.activate_upcoming_seasons()
            self.create_season_if_needed()
            self.send_ending_soon_notifications()
            logger.info("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ manage_seasons: {e}",
                         exc_info=True)
            self.send_telegram_message(
                f"üö® *–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏!* üö®\n"
                f"–°–∏—Å—Ç–µ–º–∞ —Å—Ç–æ–ª–∫–Ω—É–ª–∞—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π: `{str(e)}`\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
            )

    def process_expired_seasons(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ–∑–æ–Ω—ã –∏ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"""
        now = timezone.now().date()
        expired_seasons = Season.objects.filter(
            end_date__lt=now,
            is_active=True
        )

        for season in expired_seasons:
            try:
                season.is_active = False
                season.save()
                logger.info(f"–°–µ–∑–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω: {season.name}")
                self.award_season_winners(season)
                self.send_season_end_notification(season)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–∑–æ–Ω–∞ {season.name}: {e}")

    def activate_upcoming_seasons(self):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–µ–∑–æ–Ω—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"""
        now = timezone.now().date()
        upcoming_seasons = Season.objects.filter(
            start_date__lte=now,
            end_date__gte=now,
            is_active=False
        )

        for season in upcoming_seasons:
            try:
                Season.objects.filter(is_active=True).update(is_active=False)
                season.is_active = True
                season.save()
                logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å–µ–∑–æ–Ω: {season.name}")
                self.send_season_start_notification(season)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ–∑–æ–Ω–∞ {season.name}: {e}")

    def create_season_if_needed(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö"""
        if Season.objects.filter(is_active=True).exists():
            return

        today = timezone.now().date()

        try:
            theme = self.determine_season_theme()
            season_name = self.generate_season_name(theme)
            new_season = Season.objects.create(
                name=season_name,
                theme=theme,
                start_date=today,
                end_date=today + relativedelta(months=3)
            )
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω: {season_name}")
            self.send_season_start_notification(new_season)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞: {e}")
            self.send_telegram_message(
                f"üö® *–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω!* üö®\n"
                f"–û—à–∏–±–∫–∞: `{str(e)}`\n"
                f"–¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"
            )

    def send_ending_soon_notifications(self):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞ (–∑–∞ 3 –¥–Ω—è)"""
        warning_date = timezone.now().date() + timedelta(days=3)
        ending_seasons = Season.objects.filter(
            end_date=warning_date,
            is_active=True
        )
        for season in ending_seasons:
            try:
                self.send_season_ending_soon_notification(season)
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω—Ü–µ —Å–µ–∑–æ–Ω–∞ {season.name}: {e}")

    def determine_season_theme(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–º—É —Å–µ–∑–æ–Ω–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É"""
        month = datetime.now().month
        if month in [12, 1, 2]:
            return "winter"
        elif month in [3, 4, 5]:
            return "spring"
        elif month in [6, 7, 8]:
            return "summer"
        else:
            return "autumn"

    def generate_season_name(self, theme: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ IT-—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–µ–∑–æ–Ω–∞"""
        year = datetime.now().year
        it_titles = SEASON_IT_NAMES.get(theme, [])
        if not it_titles:
            return f"–°–µ–∑–æ–Ω {theme.capitalize()} {year}"
        base_name = random.choice(it_titles)
        season_name = f"{base_name} {year}"
        counter = 1
        while Season.objects.filter(name=season_name).exists():
            season_name = f"{base_name} {year} v{counter}"
            counter += 1
        return season_name

    def generate_it_stats(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–µ–π–∫–æ–≤—É—é IT-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        stats = [
            f"CPU Usage: {random.randint(30, 90)}%",
            f"RAM: {random.randint(16, 128)}GB/{random.randint(128, 256)}GB",
            f"Uptime: {random.randint(30, 90)} days",
            f"Pending updates: {random.randint(5, 800)}",
            f"Security patches: {random.randint(1, 50)} critical",
            f"Network: {random.randint(100, 1000)}MB/s",
            f"Storage: {random.randint(20, 90)}% full"
        ]
        return "\n".join(stats)

    def award_season_winners(self, season):
        """–ù–∞–≥—Ä–∞–∂–¥–∞–µ—Ç —Ç–æ–ø-3 —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
           —Å–µ–∑–æ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏"""
        try:
            top_admins = SeasonRank.objects.filter(
                season=season
            ).order_by('-experience')[:3]
            if not top_admins:
                logger.info(
                    f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –≤ —Å–µ–∑–æ–Ω–µ {season.name}")
                return
            rewards = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
            roles = {
                1: "–ì–ª–∞–≤–Ω—ã–π –≤—ã–µ–∑–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                2: "–í–µ–¥—É—â–∏–π –≤—ã–µ–∑–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                3: "–°—Ç–∞—Ä—à–∏–π –≤—ã–µ–∑–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            }
            for position, admin in enumerate(top_admins, 1):
                username = admin.username or f"admin_{admin.user_id}"
                achievement_name = (
                    f"{rewards[position]} {roles[position]}"
                    f" —Å–µ–∑–æ–Ω–∞ {season.name} "
                    f"(–£—Ä–æ–≤–µ–Ω—å {admin.level})"
                )
                Achievement.objects.create(
                    user_id=admin.user_id,
                    username=username,
                    achievement_name=achievement_name
                )
            logger.info(
                f"–ù–∞–≥—Ä–∞–∂–¥–µ–Ω—ã —Ç–æ–ø-3 –≤—ã–µ–∑–¥–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö "
                f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ–∑–æ–Ω–∞ {season.name}")
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è —Ç–æ–ø-–∞–¥–º–∏–Ω–æ–≤ —Å–µ–∑–æ–Ω–∞ {season.name}: {e}")

    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –≥—Ä—É–ø–ø—É"""
        try:
            group_chat_id = os.getenv("TELEGRAM_GROUP_CHAT_ID")
            if not group_chat_id:
                logger.error("TELEGRAM_GROUP_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
                return

            async_to_sync(application.bot.send_message)(
                chat_id=group_chat_id,
                text=message,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

    def send_season_start_notification(self, season):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ IT-—Å–µ–∑–æ–Ω–∞"""
        meme = random.choice(IT_MEMES)
        stats = self.generate_it_stats()
        message = (
            f"üöÄ *–ó–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π IT-—Å–µ–∑–æ–Ω: {season.name}!*\n\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {season.start_date.strftime('%d.%m.%Y')} - "
            f"{season.end_date.strftime('%d.%m.%Y')}\n\n"
            f"‚öôÔ∏è *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ–∑–æ–Ω–∞:*\n"
            f"```\n{stats}\n```\n"
            f"üí° {meme}\n\n"
            f"üî• *–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?*\n"
            f"- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /join –ø—Ä–∏ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏\n"
            f"- –ü–æ–∫–∏–¥–∞–π—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /leave\n"
            f"- –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ–ø—ã—Ç –∏ –ø–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å\n"
            f"- –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∫–æ–º–∞–Ω–¥–æ–π /profile\n\n"
            f"üèÜ –¢–æ–ø-3 –≤—ã–µ–∑–¥–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ–ª—É—á–∞—Ç "
            f"—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –∫–æ–Ω—Ü–µ —Å–µ–∑–æ–Ω–∞! –ù–µ—Ç. :)"
        )
        self.send_telegram_message(message)

    def send_season_end_notification(self, season):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞"""
        try:
            top_admin = SeasonRank.objects.filter(
                season=season
            ).order_by('-experience').first()
            winner_text = ""
            if top_admin:
                username = top_admin.username or f"admin_{top_admin.user_id}"
                winner_text = (
                    f"\n\nüèÜ *–õ—É—á—à–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ–∑–æ–Ω–∞:* "
                    f"@{username} "
                    f"(–£—Ä–æ–≤–µ–Ω—å {top_admin.level})"
                )
            season_stats = SeasonRank.objects.filter(season=season).aggregate(
                total_visits=Sum("visits_count"),
                avg_level=Avg("level")
            )

            total_visits = season_stats["total_visits"] or 0
            avg_level = season_stats["avg_level"] or 0

            message = (
                f"üèÅ *–°–µ–∑–æ–Ω {season.name} –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
                f"üìä –ò—Ç–æ–≥–∏ —Å–µ–∑–æ–Ω–∞:\n"
                f"- –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {SeasonRank.objects.filter(
                    season=season).count()}\n"
                f"- –í—Å–µ–≥–æ –≤—ã–µ–∑–¥–æ–≤: {total_visits}\n"
                f"- –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: {avg_level:.1f}\n"
                f"{winner_text}\n\n"
                f"üèÖ –¢–æ–ø-3 –≤—ã–µ–∑–¥–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ "
                f"–ø–æ–ª—É—á–∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n"
                f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile"
            )
            self.send_telegram_message(message)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞: {e}")

    def send_season_ending_soon_notification(self, season):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞ (–∑–∞ 3 –¥–Ω—è)"""
        days_left = (season.end_date - timezone.now().date()).days
        meme = random.choice(IT_MEMES)

        leader = SeasonRank.objects.filter(
            season=season
        ).order_by('-experience').first()

        leader_text = ""
        if leader:
            username = leader.username or f"admin_{leader.user_id}"
            leader_text = (f"\nüëë –¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä: @{username} "
                           f"(–£—Ä–æ–≤–µ–Ω—å {leader.level})")

        message = (
            f"‚è∞ *–í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω—è "
            f"–¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞ {season.name}*\n\n"
            f"üèÉ‚Äç‚ôÇÔ∏è –£—Å–ø–µ–π—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—á–∫–∏ –æ–ø—ã—Ç–∞!\n"
            f"üèÜ –¢–æ–ø-3 –≤—ã–µ–∑–¥–Ω—ã—Ö –∞–¥–º–∏–Ω–∞ –ø–æ–ª—É—á–∞—Ç "
            f"—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!{leader_text}\n\n"
            f"üí° {meme}\n\n"
            f"üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥–æ–π /profile"
        )
        self.send_telegram_message(message)
