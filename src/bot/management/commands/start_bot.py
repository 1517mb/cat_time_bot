import logging
import os
import re
from datetime import datetime
from difflib import get_close_matches
from zoneinfo import ZoneInfo

import aiohttp
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from asgiref.sync import sync_to_async
from django.conf import settings
from django.core.management.base import BaseCommand
from django.utils import timezone
from dotenv import load_dotenv
from telegram import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from bot.management.core.statistics import (
    get_daily_statistics_message,
    update_daily_statistics,
)
from bot.models import Company, UserActivity

load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

JOIN_CO, SELECT_CO = range(2)

VALID_COMPANY_NAME_PATTERN = re.compile(r"^[–ê-–Ø–∞-—èA-Za-z0-9\s\-]+$")


scheduler = AsyncIOScheduler(timezone=ZoneInfo("Europe/Moscow"))


async def help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    """

    help_text = (
        "üò∫üëã –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.\n"
        "/join <–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è> - –ü—Ä–∏–±—ã—Ç—å –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.\n"
        "/leave - –ü–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
        "/edit - –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –≤ —Ç–µ–∫—É—â—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.\n"
        "\n"
        "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start\\_scheduler <–í—Ä–µ–º—è> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã.\n"
        "/stop\\_scheduler - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã.\n"
        "/get\\_chat\\_info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ.\n"
        "/mew - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∞."
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def get_chat_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    try:
        chat = await context.bot.get_chat(chat_id)
        try:
            member_count = await chat.get_member_count()
        except Exception:
            member_count = (
                "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–≥—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞)")
        chat_info = f"""
üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:
- ID: {chat.id}
- –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}
- –¢–∏–ø: {chat.type}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}
- –û–ø–∏—Å–∞–Ω–∏–µ: {chat.description if chat.description else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}
- –°—Å—ã–ª–∫–∞: {chat.invite_link if chat.invite_link else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        """
        await update.message.reply_text(chat_info)
    except Exception as e:
        await update.message.reply_text(
            f"üö® *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ:* {e}",
            parse_mode="Markdown")


async def get_weather():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã."""
    api_key = os.getenv("OPENWEATHER_API_KEY")
    city = "Zelenograd"
    city_ru = "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥–µ"
    url = ("http://api.openweathermap.org/data/2.5/"
           + f"weather?q={city}&appid={api_key}&units=metric&lang=ru")

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            if data["cod"] == 200:
                temp = data["main"]["temp"]
                feels_like = data["main"]["feels_like"]
                pressure_hpa = data["main"]["pressure"]
                pressure_mmhg = pressure_hpa * 0.750062
                humidity = data["main"]["humidity"]
                description = data["weather"][0]["description"]
                clouds = data["clouds"]["all"]
                wind_speed = data["wind"]["speed"]
                wind_gust = data["wind"].get("gust", 0)
                wind_deg = data["wind"].get("deg", 0)

                def get_wind_direction(deg):
                    """
                    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —É–≥–ª—É.

                    :param deg: –£–≥–æ–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞.
                    :return: –°—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    –≤–µ—Ç—Ä–∞.
                    """

                    directions = [
                        "—Å–µ–≤–µ—Ä–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–≤–æ—Å—Ç–æ—á–Ω—ã–π",
                        "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–∂–Ω—ã–π", "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
                        "–∑–∞–ø–∞–¥–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
                    ]
                    index = round((deg % 360) / 45) % 8
                    return directions[index]

                wind_direction = get_wind_direction(wind_deg)

                sunrise = datetime.fromtimestamp(
                    data["sys"]["sunrise"]).strftime("%H:%M")
                sunset = datetime.fromtimestamp(
                    data["sys"]["sunset"]).strftime("%H:%M")

                forecast_url = ("http://api.openweathermap.org/data/2.5/"
                                + f"forecast?q={city}&appid={api_key}&"
                                + "units=metric&lang=ru")
                async with session.get(forecast_url) as forecast_response:
                    forecast_data = await forecast_response.json()
                    if forecast_data["cod"] == "200":
                        current_date = datetime.now().date()

                        morning_temp = None

                        day_temp = None
                        evening_temp = None

                        for entry in forecast_data["list"]:
                            entry_time = datetime.fromtimestamp(entry["dt"])
                            if entry_time.date() == current_date:
                                time = entry_time.strftime("%H:%M")
                                if time == "09:00":
                                    morning_temp = entry["main"]["temp"]
                                elif time == "15:00":
                                    day_temp = entry["main"]["temp"]
                                elif time == "21:00":
                                    evening_temp = entry["main"]["temp"]

                        forecast_temp_message = (
                            f"üåÖ –£—Ç—Ä–æ–º: {morning_temp}¬∞C\n"
                            f"üåû –î–Ω—ë–º: {day_temp}¬∞C\n"
                            f"üåá –í–µ—á–µ—Ä–æ–º: {evening_temp}¬∞C"
                        )
                    else:
                        forecast_temp_message = (
                            "üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã. üö®")

                weather_emoji = {
                    "–¥–æ–∂–¥—å": "üåßÔ∏è",
                    "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
                    "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥": "üå®Ô∏è",
                    "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥": "üå®Ô∏è",
                    "—è—Å–Ω–æ": "‚òÄÔ∏è",
                    "–æ–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è",
                    "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "‚õÖ",
                    "–ø–∞—Å–º—É—Ä–Ω–æ": "üå•Ô∏è",
                    "–Ω–µ–±–æ–ª—å—à–∞—è –º–æ—Ä–æ—Å—å": "üåßÔ∏è",
                    "–ø–ª–æ—Ç–Ω—ã–π —Ç—É–º–∞–Ω": "üå´Ô∏è",
                    "—Ç—É–º–∞–Ω": "üå´Ô∏è",
                    "–≥—Ä–æ–∑–∞": "‚õàÔ∏è",
                    "–≤–µ—Ç–µ—Ä": "üí®",
                }

                emoji = weather_emoji.get(description.lower(), "‚ùì")

                weather_message = (
                    f"–ü–æ–≥–æ–¥–∞ –≤ {city_ru}:\n"
                    f"{emoji} {description}\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C\n"
                    f"üå• –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds}%\n"
                    f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å, {wind_direction}\n"
                    f"üå¨ –ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞: {wind_gust} –º/—Å\n"
                    f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {pressure_mmhg:.1f} –º–º —Ä—Ç. —Å—Ç.\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"\n"
                    f"–î–ª–∏–Ω–∞ –¥–Ω—è –≤ {city_ru}:\n"
                    f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise}\n"
                    f"üåá –ó–∞–∫–∞—Ç: {sunset}\n"
                    f"\n"
                    f"–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                    f"{forecast_temp_message}\n"
                    f"\n"
                    f"** –ü–æ –¥–∞–Ω–Ω—ã–º openweathermap.org"
                )
                return weather_message
            else:
                return "üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. üö®"


async def send_weather_to_group(bot):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã –≤ –≥—Ä—É–ø–ø—É."""
    try:
        weather_message = await get_weather()
        group_chat_id = os.getenv("TELEGRAM_GROUP_CHAT_ID")
        await bot.send_message(chat_id=group_chat_id, text=weather_message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–≥–æ–¥—ã: {e}")
        await bot.send_message(
            chat_id=group_chat_id, text="üö® –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≥–æ–¥—É. üö®"
        )


async def stop_scheduler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    if scheduler.running:
        scheduler.shutdown(wait=False)
        await update.message.reply_text("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–≥–æ–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. üåßÔ∏è")
    else:
        await update.message.reply_text("üö¶ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. üö¶")


async def get_similar_companies(company_name):
    """
    Searches for companies with names similar to the given company_name
    and returns a list of the closest matches (up to 2 matches with a
    similarity cutoff of 0.6).

    :param company_name: The company name to search for.
    :return: A list of strings of the closest company name matches.
    """
    similar_companies = await sync_to_async(list)(
        Company.objects.filter(name__icontains=company_name).values_list(
            "name", flat=True)
    )
    return get_close_matches(company_name, similar_companies, n=2, cutoff=0.6)


async def join(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    company_name = " ".join(context.args)

    if not company_name:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /join.",
            parse_mode="Markdown")
        return ConversationHandler.END

    if not VALID_COMPANY_NAME_PATTERN.match(company_name):
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ"
            + " –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Ü–∏—Ñ—Ä—ã –∏ —Ç–∏—Ä–µ.",
            parse_mode="Markdown")
        return ConversationHandler.END

    active_activity = await sync_to_async(UserActivity.objects.filter(
        user_id=user_id, leave_time__isnull=True).exists)()

    if active_activity:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–í—ã –µ—â—ë –Ω–µ –ø–æ–∫–∏–Ω—É–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.",
            parse_mode="Markdown")
        return ConversationHandler.END

    try:
        company = await sync_to_async(
            Company.objects.filter(name=company_name).first)()
        if company:
            local_time = timezone.localtime(timezone.now())
            await update.message.reply_text(
                f"üê±‚Äçüíª *–í—ã –ø—Ä–∏–±—ã–ª–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é {company_name}* üê±‚Äçüíª\n"
                f"–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {local_time.strftime('%H:%M')}.",
                parse_mode="Markdown"
            )
            await sync_to_async(UserActivity.objects.create)(
                user_id=user_id,
                username=username,
                company=company
            )
            return ConversationHandler.END
        else:
            similar_companies = await get_similar_companies(company_name)
            if similar_companies:
                similar_companies_text = "\n".join(
                    [f"{i + 1}. {company}" for i, company in enumerate(
                        similar_companies)])
                reply_keyboard = [
                    [KeyboardButton(company)] for company in similar_companies
                ] + [[KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é")]]
                await update.message.reply_text(
                    f"üö® *–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º \"{company_name}\" "
                    + "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ.* üö®\n"
                    f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n{similar_companies_text}\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.",
                    parse_mode="Markdown",
                    reply_markup=ReplyKeyboardMarkup(
                        reply_keyboard, one_time_keyboard=True)
                )
                return SELECT_CO
            else:
                company, created = await sync_to_async(
                    Company.objects.get_or_create)(name=company_name)
                local_time = timezone.localtime(timezone.now())
                await update.message.reply_text(
                    f"üê±‚Äçüíª *–í—ã –ø—Ä–∏–±—ã–ª–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é {company_name}* üê±‚Äçüíª\n"
                    f"–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {local_time.strftime('%H:%M')}.",
                    parse_mode="Markdown"
                )
                await sync_to_async(UserActivity.objects.create)(
                    user_id=user_id,
                    username=username,
                    company=company
                )
                return ConversationHandler.END
    except Exception:
        await update.message.reply_text(
            "üö® *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.* üö®",
            parse_mode="Markdown"
        )
        return ConversationHandler.END


async def select_company(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.

    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
    –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
    –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, —Ç–æ –æ–Ω –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–µ–π, –∏–Ω–∞—á–µ
    –æ–Ω –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.

    :param update: update –æ—Ç Telegram
    :param context: context –æ—Ç Telegram
    :return: —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ ConversationHandler
    """
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    selected_company = update.message.text

    if not VALID_COMPANY_NAME_PATTERN.match(selected_company):
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ"
            + " –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ —Ü–∏—Ñ—Ä—ã.",
            parse_mode="Markdown")
        return ConversationHandler.END

    if selected_company == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é":
        await update.message.reply_text(
            "üêæ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.* üêæ"
        )
        return JOIN_CO

    active_activity = await sync_to_async(UserActivity.objects.filter(
        user_id=user_id, leave_time__isnull=True).exists)()

    if active_activity:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–í—ã –µ—â—ë –Ω–µ –ø–æ–∫–∏–Ω—É–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.",
            parse_mode="Markdown")
        return ConversationHandler.END

    company, created = await sync_to_async(
        Company.objects.get_or_create)(name=selected_company)
    local_time = timezone.localtime(timezone.now())
    await update.message.reply_text(
        f"üê±‚Äçüíª *–í—ã –ø—Ä–∏–±—ã–ª–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é {selected_company}* üê±‚Äçüíª\n"
        f"–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {local_time.strftime('%H:%M')}.",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    await sync_to_async(UserActivity.objects.create)(
        user_id=user_id,
        username=username,
        company=company
    )
    return ConversationHandler.END


async def _validate_and_update_time(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    time_field: str,
    error_message_prefix: str,
    success_message: str,
) -> None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.
    """
    user_id = update.message.from_user.id

    active_activity = await sync_to_async(UserActivity.objects.filter(
        user_id=user_id, leave_time__isnull=True).first)()

    if not active_activity:
        await update.message.reply_text(
            f"üö® *–û—à–∏–±–∫–∞!* üö®\n"
            f"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –¥–ª—è "
            f"–∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å {error_message_prefix}.",
            parse_mode="Markdown")
        return

    args = context.args
    if not args or len(args) != 1:
        await update.message.reply_text(
            f"üö® *–û—à–∏–±–∫–∞!* üö®\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è {error_message_prefix} "
            f"–≤ —Ñ–æ—Ä–º–∞—Ç–µ *–ß–ß:–ú–ú* (–Ω–∞–ø—Ä–∏–º–µ—Ä, /edit 10:15).",
            parse_mode="Markdown")
        return

    new_time_str = args[0]

    try:
        new_time = datetime.strptime(new_time_str, '%H:%M').time()
    except ValueError:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
            "—É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–ß–ß:–ú–ú* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:15).",
            parse_mode="Markdown")
        return

    current_time = timezone.localtime(timezone.now()).time()
    if new_time > current_time:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —Ç–µ–∫—É—â–µ–º—É.",
            parse_mode="Markdown")
        return

    today = timezone.now().date()
    new_datetime = datetime.combine(today, new_time)
    new_datetime = timezone.make_aware(new_datetime)

    if time_field == "leave_time" and new_datetime < active_activity.join_time:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–í—Ä–µ–º—è —É–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è. "
            "–í–∞—à–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: "
            f"{active_activity.join_time.strftime('%H:%M')}.",
            parse_mode="Markdown")
        return

    if time_field == ("join_time"
                      and active_activity.leave_time
                      and new_datetime > active_activity.leave_time):
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ —É–±—ã—Ç–∏—è. "
            "–í–∞—à–µ –≤—Ä–µ–º—è —É–±—ã—Ç–∏—è: "
            f"{active_activity.leave_time.strftime('%H:%M')}.",
            parse_mode="Markdown")
        return

    setattr(active_activity, time_field, new_datetime)
    await sync_to_async(active_activity.save)()

    company_name = await sync_to_async(lambda: active_activity.company.name)()
    local_time = timezone.localtime(new_datetime)

    await update.message.reply_text(
        f"üòª *–£—Å–ø–µ—à–Ω–æ!* üòª\n"
        f"{success_message.format(
            company_name=company_name, time=local_time.strftime('%H:%M'))}.",
        parse_mode="Markdown")


async def edit_arrival_time(update: Update,
                            context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.
    """
    await _validate_and_update_time(
        update,
        context,
        time_field="join_time",
        error_message_prefix="–≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è",
        success_message=("–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é {company_name} "
                         "—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {time}"),
    )

    user_id = update.message.from_user.id
    username = update.message.from_user.username
    await update_daily_statistics(user_id, username)


async def edit_departure_time(update: Update,
                              context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–±—ã—Ç–∏—è –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
    """
    await _validate_and_update_time(
        update,
        context,
        time_field="leave_time",
        error_message_prefix="–≤—Ä–µ–º—è —É–±—ã—Ç–∏—è",
        success_message=("–í—Ä–µ–º—è —É–±—ã—Ç–∏—è –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {company_name} "
                         "—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {time}"),
    )

    user_id = update.message.from_user.id
    username = update.message.from_user.username
    await update_daily_statistics(user_id, username)


async def add_new_company(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.

    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏,
    –∏ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞,
    –∏–Ω–∞—á–µ - –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
    –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.

    :param update: update –æ—Ç Telegram
    :param context: context –æ—Ç Telegram
    :return: —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ ConversationHandler
    """
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    company_name = update.message.text

    active_activity = await sync_to_async(UserActivity.objects.filter(
        user_id=user_id, leave_time__isnull=True).exists)()

    if active_activity:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–í—ã –µ—â—ë –Ω–µ –ø–æ–∫–∏–Ω—É–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.",
            parse_mode="Markdown")
        return ConversationHandler.END

    if not VALID_COMPANY_NAME_PATTERN.match(company_name):
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ"
            + " –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ —Ü–∏—Ñ—Ä—ã",
            parse_mode="Markdown")
        return ConversationHandler.END
    local_time = timezone.localtime(timezone.now())
    company, created = await sync_to_async(
        Company.objects.get_or_create)(name=company_name)
    await update.message.reply_text(
        f"üê±‚Äçüíª *–í—ã –ø—Ä–∏–±—ã–ª–∏ –∫ –Ω–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {company_name}* üê±‚Äçüíª\n"
        f"–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {local_time.strftime('%H:%M')}.\n ",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    await sync_to_async(UserActivity.objects.create)(
        user_id=user_id,
        username=username,
        company=company
    )
    return ConversationHandler.END


async def leave(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Callback –¥–ª—è —É—Ö–æ–¥–∞ –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.

    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É /leave,
    —Ç–æ –æ–Ω –ø–æ–∫–∏–Ω–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω
    –ø—Ä–∏–±—ã–ª, –∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.

    :param update: update –æ—Ç Telegram
    :param context: context –æ—Ç Telegram
    :return: None
    """

    user_id = update.message.from_user.id
    username = update.message.from_user.username
    try:
        activity = await sync_to_async(UserActivity.objects.select_related(
            "company").filter(
                user_id=user_id,
                leave_time__isnull=True).latest)("join_time")

        activity.leave_time = timezone.now()
        await sync_to_async(activity.save)()

        await update_daily_statistics(user_id, username)

        company_name = activity.company.name
        spent_time = activity.get_spent_time
        local_time = timezone.localtime(timezone.now())

        await update.message.reply_text(
            f"üêæüëã *–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é {company_name}* üêæüëã\n"
            f"–í—Ä–µ–º—è —É—Ö–æ–¥–∞: {local_time.strftime('%H:%M')}.\n"
            f"–ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {spent_time}.",
            parse_mode="Markdown"
        )

    except UserActivity.DoesNotExist:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–í—ã –Ω–µ –ø—Ä–∏–±—ã–ª–∏ –Ω–∏ –∫ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.", parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /leave: {e}")
        await update.message.reply_text(
            "üö® *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.* üö®",
            parse_mode="Markdown")


async def remind_to_leave(bot):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /leave."""
    try:
        active_activities = await sync_to_async(
            lambda: list(UserActivity.objects.filter(leave_time__isnull=True))
        )()

        for activity in active_activities:
            user_id = activity.user_id
            company_name = await sync_to_async(lambda: activity.company.name)()

            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=(
                        f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* ‚ö†Ô∏è\n"
                        f"–í—ã –≤—Å—ë –µ—â—ë –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤"
                        f"–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ *{company_name}*?\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /leave, "
                        f"—á—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.\n"
                        f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–±—ã—Ç–∏—è, "
                        f"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit."
                    ),
                    parse_mode="Markdown"
                )
                logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logging.error(
                    "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ "
                    f"—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ remind_to_leave: {e}", exc_info=True)


async def mew(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞."""
    url = "https://api.thecatapi.com/v1/images/search"

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    cat_photo_url = data[0]["url"]
                    await update.message.reply_photo(photo=cat_photo_url)
                else:
                    await update.message.reply_text(
                        "üòø –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞. üòø")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –∫–æ—Ç–∏–∫–æ–≤: {e}")
            await update.message.reply_text(
                "üòø –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞. üòø")


async def send_daily_statistics_to_group(bot):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.

    –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤
    –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã TELEGRAM_GROUP_CHAT_ID.
    –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.

    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """

    message = await get_daily_statistics_message()
    group_chat_id = os.getenv("TELEGRAM_GROUP_CHAT_ID")
    await bot.send_message(chat_id=group_chat_id,
                           text=message,
                           parse_mode="Markdown")


async def start_scheduler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã."""
    if not context.args:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú"
            + " (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start\\_scheduler 7:30).",
            parse_mode="Markdown"
        )
        return

    time_str = context.args[0]

    try:
        hour, minute = map(int, time_str.split(":"))
    except ValueError:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "
            "—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start\\_scheduler 7:30).",
            parse_mode="Markdown"
        )
        return

    if hour < 0 or hour > 23 or minute < 0 or minute > 59:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞!* ‚ùå\n"
            "–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å "
            + "–æ—Ç 0 –¥–æ 23, –∞ –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59.",
            parse_mode="Markdown"
        )
        return

    scheduler.remove_all_jobs()

    scheduler.add_job(
        send_weather_to_group,
        trigger="cron",
        hour=hour,
        minute=minute,
        args=[context.bot]
    )

    scheduler.add_job(
        remind_to_leave,
        trigger="cron",
        hour=20,
        minute=41,
        args=[context.bot]
    )

    scheduler.add_job(
        send_daily_statistics_to_group,
        trigger="cron",
        hour=18,
        minute=0,
        args=[context.bot]
    )

    if not scheduler.running:
        scheduler.start()

    await update.message.reply_text(
        f"‚òÄÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–≥–æ–¥—ã –∑–∞–ø—É—â–µ–Ω. ‚õàÔ∏è\n"
        f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {hour:02d}:{minute:02d}\n"
        "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: 21:00",
        parse_mode="Markdown"
    )


class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¢–µ–ª–µ–≥—Ä–∞–º–º"

    def handle(self, *args, **options):
        application = ApplicationBuilder().token(
            settings.TELEGRAM_BOT_TOKEN).build()

        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("join", join),
            ],
            states={
                SELECT_CO: [MessageHandler(
                    filters.TEXT & ~filters.COMMAND, select_company)],
                JOIN_CO: [MessageHandler(
                    filters.TEXT & ~filters.COMMAND, add_new_company)],
            },
            fallbacks=[CommandHandler(
                "cancel", lambda update, context: ConversationHandler.END)],
        )

        application.add_handler(conv_handler)
        application.add_handler(CommandHandler("help", help))
        application.add_handler(CommandHandler("get_chat_info", get_chat_info))
        application.add_handler(CommandHandler("leave", leave))
        application.add_handler(CommandHandler("mew", mew))
        application.add_handler(CommandHandler(
            "start_scheduler", start_scheduler))
        application.add_handler(CommandHandler(
            "stop_scheduler", stop_scheduler))
        application.add_handler(CommandHandler("edit", edit_arrival_time))
        application.add_handler(CommandHandler("dep", edit_departure_time))

        try:
            application.run_polling(allowed_updates=Update.ALL_TYPES)
        except KeyboardInterrupt:
            self.stdout.write(self.style.SUCCESS("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."))
            application.stop()
